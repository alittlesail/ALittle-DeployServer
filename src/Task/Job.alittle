
namespace DeployServer;

public enum JobType
{
    NONE = 0;
    BATCH = 1;	// 批处理
    DEEPCOPY = 2;	// 复制目录
    COPYFILE = 3;	// 复制文件
    SENDVIRTUALKEY = 4;	// 发送命令
    WAITPROCSSEXIT = 5; // 等待进程退出
    CREATEPROCESS = 6;	// 创建进程
    KILLPROCESS = 7;	// 强杀进程
    RESHARPERREDMINE = 8;	// 代码检查
    IGG_CHAT = 9;	// IGG的聊天工具群通知
    MONITORPROCESS = 10;	// 创建进程
}

public struct JobInfoDetail
{
    // 批处理命令
    string batch_dir;
    string batch_cmd;
    string batch_param;

    // 深度拷贝
    string deepcopy_src;
    string deepcopy_dst;
    string deepcopy_ext;

    // 拷贝文件
    string copyfile_src;
    List<string> copyfile_file;
    string copyfile_dst;

    // 发送虚拟按键
    List<string> virtualkey_exepath;	// exe的绝对路径
    List<string> virtualkey_cmd;		// 命令

    // 等待进程退出
    List<string> wait_p_exit_exe_path;	//  exe的绝对路径
    int wait_p_exit_max_time;			// 最多等待多少秒，小于或等于0表示永远等待

    // 创建进程
    string createprocess_dir;
    string createprocess_cmd;
    string createprocess_param;

    // 杀死进程
    List<string> killprocess_exe_path;	//  exe的绝对路径

    // Resharper检查代码，并输出到Redmine
    string r2r_resharper_exe_path;		// resharper代码检查工具目录
    string r2r_resharper_cache_path;	// resharper检查缓存路径
    string r2r_resharper_output_path;	// resharper检查输出路径
    string r2r_resharper_sln_path;		// resharper检查的工程文件
    string r2r_resharper_dotsettings_path;	// resharper检查配置文件
    string r2r_redmine_url;			// redmine的地址
    string r2r_redmine_account;		// redmine的账号
    string r2r_redmine_password;		// redmine的密码
    string r2r_redmine_project_id;	//  项目ID
    string r2r_redmine_account_id;	//  账号ID
    Map<string, int> r2r_redmine_account_map;	// 账号和id的映射
    string r2r_curl_exe_path;		// curl工具的文件路径
    string r2r_code_tool;

    // IGGChat群通知
    string igg_chat_room_id;		// 房间id
    string igg_chat_title;		// 标题
    string igg_chat_content;	// 内容
    string igg_chat_token;	// token

    // 监视进程
    string monitorprocess_exe_path;	// 可执行文件路径
    bool monitorprocess_auto_start;	// 当发现没有进程时，是否无参数启动
}

protected struct JobInfo
{
    int job_type;		// 任务类型
    string job_name;

    JobInfoDetail detail;
}

public enum JobStatus
{
    WAITING = 0;	// 等待执行
    DOING = 1;		// 正在执行
    COMPLETED = 2;	// 执行完成
    FAILED = 3;		// 执行失败
}

public struct D_ProcessInfo
{
    int process_id;
    int cpu;
    int mem;
    int vmem;
    int io_read;
    int io_write;
}

public struct D_JobInfo
{
    int job_type;
    string job_name;
    int status;
    double progress;	// 执行进度
    
    JobInfoDetail detail;

    List<D_ProcessInfo> process_list;		// 进程信息
}

public struct D_BuildInfo
{
    int create_time;	// 构建时间
    int create_index;	// 构建序列
}

protected class Job
{
    private Task _task;
    private JobInfo _info;
    private int _status = 0;
    private double _progress = 0;

    public ctor(Task task, JobInfo info)
    {
        this._task = task;
        this._info = info;

        this.OnDetailUpdate();
    }

    public get info() : JobInfo { return this._info; }

    public get data_info() : D_JobInfo
    {
        var data = new D_JobInfo();
        data.job_type = this._info.job_type;
        data.job_name = this._info.job_name;
        data.status = this._status;
        data.progress = this._progress;
        data.detail = this._info.detail;
        return data;
    }

    public get status_info() : NJobStatus
    {
        var status_msg = new NJobStatus();
        status_msg.task_id = this._task.info.task_id;
        status_msg.index = this._task.GetJobIndex(this);
        status_msg.status = this._status;
        status_msg.progress = this._progress;
        return status_msg;
    }

    public fun Modify(C2SModifyJob msg)
    {
        this._info.job_name = msg.job_name;
        this._info.detail = msg.detail;

        this.OnDetailUpdate();
    }

    public fun Waiting()
    {
        this._status = JobStatus.WAITING;
        this._progress = 0;
        this.SendStatus();
    }

    public await fun Doing(BuildInfo build_info) : string
    {
        this._status = JobStatus.DOING;
        this._progress = 0;
        this.SendStatus();

        ALittle.List_Push(build_info.log_list, "===>["..ALittle.Time_GetCurDate().."]Job Begin:"..this._info.job_name);
        // 执行
        var error, log = this.Execute(build_info);
        if (log != null)
        {
            var log_list = ALittle.String_SplitSepList(log, ["\r","\n"]);
            for (var index, log_content in log_list)
                ALittle.List_Push(build_info.log_list, log_content);
        }
        ALittle.List_Push(build_info.log_list, "===>["..ALittle.Time_GetCurDate().."]Job End");
        
        if (error != null)
        {
            this._status = JobStatus.FAILED;
        }
        else
        {
            this._status = JobStatus.COMPLETED;
            this._progress = 1;
        }
        this.SendStatus();
        return error;
    }

    private await fun Execute(BuildInfo build_info) : string, string { return null, null; }

    private fun SendStatus()
    {
        var status_msg = this.status_info;
        A_WebAccountManager.SendMsgToAll(status_msg);
    }

    private fun OnDetailUpdate()
    {

    }
}

public struct NJobStatus
{
    int task_id;
    int index;
    int status;
    double progress;
    List<D_ProcessInfo> process_list;	// 进程信息
}

protected static CreateJob(Task task, JobInfo info) : Job
{
    if (info.job_type == JobType.BATCH)
    	return new BatchJob(task, info);
    elseif (info.job_type == JobType.DEEPCOPY)
    	return new DeepCopyJob(task, info);
    elseif (info.job_type == JobType.COPYFILE)
    	return new CopyFileJob(task, info);
    elseif (info.job_type == JobType.SENDVIRTUALKEY)
    	return new SendVirtualKeyJob(task, info);
    elseif (info.job_type == JobType.WAITPROCSSEXIT)
    	return new WaitProcessExitJob(task, info);
    elseif (info.job_type == JobType.CREATEPROCESS)
    	return new CreateProcessJob(task, info);
    elseif (info.job_type == JobType.KILLPROCESS)
    	return new KillProcessJob(task, info);
    elseif (info.job_type == JobType.RESHARPERREDMINE)
    	return new ReSharperRedmineJob(task, info);
    elseif (info.job_type == JobType.IGG_CHAT)
    	return new IGGChatJob(task, info);
    elseif (info.job_type == JobType.MONITORPROCESS)
    	return new MonitorProcessJob(task, info);
    return null;
}