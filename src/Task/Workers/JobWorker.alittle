
namespace DeployServer;

public struct QBatchExecute
{
    JobInfoDetail detail;
}

public struct ABatchExecute
{
    int exit_code;
    string content;
}

[Worker]
public await static HandleBatchWorker(ALittle.IWorkerCommon sender, QBatchExecute msg) : ABatchExecute
{
    var detail = msg.detail;

    var rsp = new ABatchExecute();

    var cmd = "";
    if (detail.batch_dir != null && detail.batch_dir != "")
    {
        var index = ALittle.String_Find(detail.batch_dir, ":");
        if (index != null)
            cmd = cmd..ALittle.String_Sub(detail.batch_dir, 1, index).." && ";
        if (index != ALittle.String_Len(detail.batch_dir))
        	cmd = cmd.."cd \""..detail.batch_dir.."\" && ";
    }
    cmd = cmd..detail.batch_cmd.." "..detail.batch_param;
    var file = lua.io.popen(cmd, "rb");
    assert (file != null, "命令执行失败:"..cmd);
    rsp.content = file.read("*a");
    rsp.exit_code = file.close();
    return rsp;
}

public struct QDeepCopyExecute
{
    JobInfoDetail detail;
}

public struct ADeepCopyExecute
{
}

[Worker]
public await static HandleDeepCopyWorker(ALittle.IWorkerCommon sender, QDeepCopyExecute msg) : ADeepCopyExecute
{
    var detail = msg.detail;
    var rsp = new ADeepCopyExecute();
    if (detail.deepcopy_ext == "") detail.deepcopy_ext = null;
    var attr = ALittle.File_GetFileAttr(detail.deepcopy_src);
    assert (attr != null && attr.directory, "源目录不存在");
    ALittle.File_MakeDeepDir(detail.deepcopy_dst);
    attr = ALittle.File_GetFileAttr(detail.deepcopy_dst);
    assert (attr != null && attr.directory, "目标目录创建失败");
    ALittle.File_CopyDeepDir(detail.deepcopy_src, detail.deepcopy_dst, detail.deepcopy_ext);
    return rsp;
}

public struct QCopyFileExecute
{
    JobInfoDetail detail;
}

public struct ACopyFileExecute
{
}

[Worker]
public await static HandleCopyFileWorker(ALittle.IWorkerCommon sender, QCopyFileExecute msg) : ACopyFileExecute
{
    var detail = msg.detail;
    var rsp = new ACopyFileExecute();
    var attr = ALittle.File_GetFileAttr(detail.copyfile_src);
    assert (attr != null && attr.directory, "源目录不存在");
    ALittle.File_MakeDeepDir(detail.copyfile_dst);
    attr = ALittle.File_GetFileAttr(detail.copyfile_dst);
    assert (attr != null && attr.directory, "目标目录创建失败");

    var src = ALittle.File_PathEndWithSplit(detail.copyfile_src);
    var dst = ALittle.File_PathEndWithSplit(detail.copyfile_dst);
    for (var index, file_name in detail.copyfile_file)
    {
    	var result = ALittle.File_CopyFile(src..file_name, dst..file_name);
        assert(result, "文件复制失败:"..src..file_name);
    }
    return rsp;
}

public struct QSendVirtualKeyExecute
{
    JobInfoDetail detail;
}

public struct ASendVirtualKeyExecute
{
    string content;
}

[Worker]
public await static HandleSendVirtualKeyWorker(ALittle.IWorkerCommon sender, QSendVirtualKeyExecute msg) : ASendVirtualKeyExecute
{
    var detail = msg.detail;

    var cmd_list = msg.detail.virtualkey_cmd;
    var rsp = new ASendVirtualKeyExecute();
    var pids = carp.GetProcessIDByPath(detail.virtualkey_exepath);
    rsp.content = "发送的进程个数为:"..ALittle.List_Len(pids).."\n";
    for (var index, pid in pids)
    {
        for (var _, cmd in cmd_list)
        {
            if (ALittle.String_Sub(cmd, ALittle.String_Len(cmd)) != "\n")
            	cmd = cmd.."\n";
            rsp.content = rsp.content.."向进程ID:"..pid.." 发送命令:"..cmd;
            assert(carp.SendVirtualKey(pid, cmd), "发送失败");
        }
    }

    return rsp;
}

public struct QWaitProcessExitExecute
{
    JobInfoDetail detail;
}

public struct AWaitProcessExitExecute
{

}

[Worker]
public await static HandleWaitProcessExitWorker(ALittle.IWorkerCommon sender, QWaitProcessExitExecute msg) : AWaitProcessExitExecute
{
    var detail = msg.detail;

    var wait_map = new Map<string, bool>();
    for (var index, exe_path in detail.wait_p_exit_exe_path)
        wait_map[exe_path] = true;

    var remain_time = detail.wait_p_exit_max_time;
    while (true)
    {
        var wait_remove:Map<string, bool>;
        for (var exe_path, _ in wait_map)
        {
            var pids = carp.GetProcessIDByPath(exe_path);
            if (ALittle.List_Len(pids) == 0)
            {
                if (wait_remove == null) wait_remove = new Map<string, bool>();
                wait_remove[exe_path] = true;
            }
        }

        if (wait_remove != null)
        {
            for (var exe_path, _ in wait_remove)
            	wait_map[exe_path] = null;
        }

        if (ALittle.IsEmpty(wait_map)) break;

        // 延时1秒
        A_LoopSystem.Sleep(1000);

        // 如果只剩下1秒了，那么就直接退出
        assert (remain_time != 1, "等待超时");
        // 减少1
        if (remain_time > 1) --remain_time;
    }

    return new AWaitProcessExitExecute();
}

public struct QCreateProgressExecute
{
    JobInfoDetail detail;
}

public struct ACreateProgressExecute
{
}

[Worker]
public await static HandleCreateProgressWorker(ALittle.IWorkerCommon sender, QCreateProgressExecute msg) : ACreateProgressExecute
{
    var detail = msg.detail;

    var cmd = "";
    if (detail.batch_dir != null && detail.batch_dir != "")
    {
        var index = ALittle.String_Find(detail.batch_dir, ":");
        if (index != null)
            cmd = cmd..ALittle.String_Sub(detail.batch_dir, 1, index).." && ";
        if (index != ALittle.String_Len(detail.batch_dir))
        	cmd = cmd.."cd \""..detail.batch_dir.."\" && ";
    }
    cmd = cmd.."start "..detail.batch_cmd.." "..detail.batch_param;
    lua.os.execute(cmd);
    return new ACreateProgressExecute();
}