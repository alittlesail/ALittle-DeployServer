
namespace DeployServer;

public struct QBatchExecute
{
    JobInfoDetail detail;
}

public struct ABatchExecute
{
    int exit_code;
    string content;
}

[Worker]
public await static HandleBatchWorker(ALittle.IWorkerCommon sender, QBatchExecute msg) : ABatchExecute
{
    var detail = msg.detail;

    var rsp = new ABatchExecute();

    var cmd = "";
    if (detail.batch_dir != null && detail.batch_dir != "")
    {
        var index = ALittle.String_Find(detail.batch_dir, ":");
        if (index != null)
            cmd = cmd..ALittle.String_Sub(detail.batch_dir, 1, index).." && ";
        if (index != ALittle.String_Len(detail.batch_dir))
        	cmd = cmd.."cd \""..detail.batch_dir.."\" && ";
    }
    cmd = cmd..detail.batch_cmd.." "..detail.batch_param;
    var file = lua.io.popen(cmd, "rb");
    assert (file != null, "命令执行失败:"..cmd);
    rsp.content = file.read("*a");
    var result, error, status = file.close();
    assert(result, error);
    rsp.exit_code = status;
    return rsp;
}

public struct QDeepCopyExecute
{
    JobInfoDetail detail;
}

public struct ADeepCopyExecute
{
}

[Worker]
public await static HandleDeepCopyWorker(ALittle.IWorkerCommon sender, QDeepCopyExecute msg) : ADeepCopyExecute
{
    var detail = msg.detail;
    var rsp = new ADeepCopyExecute();
    if (detail.deepcopy_ext == "") detail.deepcopy_ext = null;
    var attr = ALittle.File_GetFileAttr(detail.deepcopy_src);
    assert (attr != null && attr.directory, "源目录不存在");
    ALittle.File_MakeDeepDir(detail.deepcopy_dst);
    attr = ALittle.File_GetFileAttr(detail.deepcopy_dst);
    assert (attr != null && attr.directory, "目标目录创建失败");
    ALittle.File_CopyDeepDir(detail.deepcopy_src, detail.deepcopy_dst, detail.deepcopy_ext);
    return rsp;
}

public struct QCopyFileExecute
{
    JobInfoDetail detail;
}

public struct ACopyFileExecute
{
}

[Worker]
public await static HandleCopyFileWorker(ALittle.IWorkerCommon sender, QCopyFileExecute msg) : ACopyFileExecute
{
    var detail = msg.detail;
    var rsp = new ACopyFileExecute();
    var attr = ALittle.File_GetFileAttr(detail.copyfile_src);
    assert (attr != null && attr.directory, "源目录不存在");
    ALittle.File_MakeDeepDir(detail.copyfile_dst);
    attr = ALittle.File_GetFileAttr(detail.copyfile_dst);
    assert (attr != null && attr.directory, "目标目录创建失败");

    var src = ALittle.File_PathEndWithSplit(detail.copyfile_src);
    var dst = ALittle.File_PathEndWithSplit(detail.copyfile_dst);
    for (var index, file_name in detail.copyfile_file)
    {
    	var result = ALittle.File_CopyFile(src..file_name, dst..file_name);
        assert(result, "文件复制失败:"..src..file_name);
    }
    return rsp;
}

public struct QSendVirtualKeyExecute
{
    JobInfoDetail detail;
}

public struct ASendVirtualKeyExecute
{
    string content;
}

[Worker]
public await static HandleSendVirtualKeyWorker(ALittle.IWorkerCommon sender, QSendVirtualKeyExecute msg) : ASendVirtualKeyExecute
{
    var detail = msg.detail;

    var cmd_list = msg.detail.virtualkey_cmd;
    var rsp = new ASendVirtualKeyExecute();
    var pids = carp.GetProcessIDByPath(detail.virtualkey_exepath);
    rsp.content = "发送的进程个数为:"..ALittle.List_Len(pids).."\n";
    for (var index, pid in pids)
    {
        for (var _, cmd in cmd_list)
        {
            if (ALittle.String_Sub(cmd, ALittle.String_Len(cmd)) != "\n")
            	cmd = cmd.."\n";
            rsp.content = rsp.content.."向进程ID:"..pid.." 发送命令:"..cmd;
            assert(carp.SendVirtualKey(pid, cmd), "发送失败");
        }
    }

    return rsp;
}

public struct QWaitProcessExitExecute
{
    JobInfoDetail detail;
}

public struct AWaitProcessExitExecute
{

}

[Worker]
public await static HandleWaitProcessExitWorker(ALittle.IWorkerCommon sender, QWaitProcessExitExecute msg) : AWaitProcessExitExecute
{
    var detail = msg.detail;

    var wait_map = new Map<string, bool>();
    for (var index, exe_path in detail.wait_p_exit_exe_path)
        wait_map[exe_path] = true;

    var remain_time = detail.wait_p_exit_max_time;
    while (true)
    {
        var wait_remove:Map<string, bool>;
        for (var exe_path, _ in wait_map)
        {
            var pids = carp.GetProcessIDByPath(exe_path);
            if (ALittle.List_Len(pids) == 0)
            {
                if (wait_remove == null) wait_remove = new Map<string, bool>();
                wait_remove[exe_path] = true;
            }
        }

        if (wait_remove != null)
        {
            for (var exe_path, _ in wait_remove)
            	wait_map[exe_path] = null;
        }

        if (ALittle.IsEmpty(wait_map)) break;

        // 延时1秒
        A_LoopSystem.Sleep(1000);

        // 如果只剩下1秒了，那么就直接退出
        assert (remain_time != 1, "等待超时");
        // 减少1
        if (remain_time > 1) --remain_time;
    }

    return new AWaitProcessExitExecute();
}

public struct QCreateProgressExecute
{
    JobInfoDetail detail;
}

public struct ACreateProgressExecute
{
}

[Worker]
public await static HandleCreateProgressWorker(ALittle.IWorkerCommon sender, QCreateProgressExecute msg) : ACreateProgressExecute
{
    var detail = msg.detail;

    var work_path:string;
    if (detail.createprocess_dir != null && detail.createprocess_dir != "") work_path = detail.createprocess_dir;
    var result = carp.CreateProcess(detail.createprocess_cmd, detail.createprocess_param, work_path);
    assert(result, "进程创建失败");
    return new ACreateProgressExecute();
}

public struct QKillProcessExecute
{
    JobInfoDetail detail;
}

public struct AKillProcessExecute
{

}

[Worker]
public await static HandleKillProcessWorker(ALittle.IWorkerCommon sender, QKillProcessExecute msg) : AKillProcessExecute
{
    var detail = msg.detail;

    for (var index, exe_path in detail.killprocess_exe_path)
    {
        var pids = carp.GetProcessIDByPath(exe_path);
        for (var _, pid in pids) carp.KillProcessByID(pid);
    }

    return new AKillProcessExecute();
}

public struct QReSharperCodeCheck
{
    JobInfoDetail detail;
}

public struct AReSharperCodeCheck
{
    string content;
    int exit_code;
}

[Worker]
public await static HandleReSharperCodeCheckWorker(ALittle.IWorkerCommon sender, QReSharperCodeCheck msg) : AReSharperCodeCheck
{
    var detail = msg.detail;

    // 检查inspectcode.exe是否存在
    {
        var attr = ALittle.File_GetFileAttr(detail.r2r_resharper_exe_path);
	    assert (attr != null && !attr.directory, "检查工具不存在");
    }

    // 检查工程文件
    {
        var attr = ALittle.File_GetFileAttr(detail.r2r_resharper_sln_path);
        assert (attr != null && !attr.directory, "要检查的工程文件不存在");
    }

    // 创建缓存目录，输出目录
    {
        assert(detail.r2r_resharper_cache_path != "", "缓存路径不能为空");
        ALittle.File_MakeDeepDir(detail.r2r_resharper_cache_path);
        assert(detail.r2r_resharper_output_path != "", "输出路径不能为空");
        ALittle.File_MakeDeepDir(detail.r2r_resharper_output_path);
    }

    // 添加执行文件
    var cmd = detail.r2r_resharper_exe_path;
    // 添加缓存路径
    cmd = cmd.." --caches-home="..detail.r2r_resharper_cache_path;
    // 添加输出路径
    var output_path = ALittle.File_PathEndWithSplit(detail.r2r_resharper_output_path);
    cmd = cmd.." -o="..output_path.."report.xml";
    // 指定格式
    cmd = cmd.." -f=Xml -a=True";
    // 处理的指定文件
    cmd = cmd.." "..detail.r2r_resharper_sln_path;
    var file = lua.io.popen(cmd, "rb");
    assert (file != null, "命令执行失败:"..cmd);

    var rsp = new AReSharperCodeCheck();
    rsp.content = file.read("*a");
    var result, error, status = file.close();
    assert(result, error);
    rsp.exit_code = status;
    return rsp;
}

public struct QRedmineDeleteIssuesAssignedToSelf
{
    string curl_exe_path;
    string url;
    string account;
    string password;
    string project_id;
}

public struct ARedmineDeleteIssuesAssignedToMe
{
}

public struct RedmineListIssuesField
{
    int id;
    string name;
}

public struct RedmineListIssuesInfo
{
    int id;	// 任务唯一ID
    string subject;	// 标题
    string description; // 描述

    RedmineListIssuesField project;
    RedmineListIssuesField tracker;
    RedmineListIssuesField status;
    RedmineListIssuesField priority;
    RedmineListIssuesField author;
    RedmineListIssuesField assigned_to;
    RedmineListIssuesField fixed_version;
}

public struct RedmineListIssuesResponse
{
    List<RedmineListIssuesInfo> issues;
    int total_count;
    int offset;
    int limit;
}

[Worker]
public await static HandleRedmineDeleteIssuesAssignedToSelfWorker(ALittle.IWorkerCommon sender, QRedmineDeleteIssuesAssignedToSelf msg) : ARedmineDeleteIssuesAssignedToMe
{
    // 检查curl.exe是否存在
    {
        var attr = ALittle.File_GetFileAttr(msg.curl_exe_path);
	    assert (attr != null && !attr.directory, "curl工具不存在");
    }

    var issues_map = new Map<int, bool>();

    // 获取指派给的项目
    var list_issues:RedmineListIssuesResponse;
    while (true)
    {
        var cmd = msg.curl_exe_path;
        cmd = cmd.." \""..msg.url.."/issues.json?assigned_to_id=me&project_id="..msg.project_id.."\"";
        cmd = cmd.." -u "..msg.account..":"..msg.password;
        var file = lua.io.popen(cmd, "rb");
        assert (file != null, "命令执行失败:"..cmd);

        var content = file.read("*a");
        var result, error, status = file.close();
        assert(result, error);
        assert (content, "curl返回值内容为空");

        error, list_issues = tcall(ALittle.String_JsonDecode, content);
        assert(result, "curl返回值json解析失败");

        if (list_issues.issues == null || ALittle.List_Len(list_issues.issues) == 0) break;

        // 开始遍历删除
        for (var index, issue in list_issues.issues)
        {
            assert (issues_map[issue.id] == null, "任务单删除失败:"..issue.id);
            issues_map[issue.id] = true;

            var delete_cmd = msg.curl_exe_path;
            delete_cmd = delete_cmd.." "..msg.url.."/issues/"..issue.id..".json";
            delete_cmd = delete_cmd.." -u "..msg.account..":"..msg.password;
            delete_cmd = delete_cmd.." -X DELETE";
            lua.os.execute(delete_cmd);
        }
    }

    return new ARedmineDeleteIssuesAssignedToMe();
}

public struct RedmineCreateIssueInfoDetail
{
    int project_id;
    string subject;
    string description;
    int priority_id; // 填2就可以了
    int assigned_to_id;
    List<int> watcher_user_ids;
}

public struct RedmineCreateIssueInfo
{
    RedmineCreateIssueInfoDetail issue;
}

public struct QRedmineCreateIssue
{
    string curl_exe_path;
    string url;
    string account;
    string password;

    string json_path;
}

public struct ARedmineCreateIssue
{
}

[Worker]
public await static HandleRedmineCreateIssueWorker(ALittle.IWorkerCommon sender, QRedmineCreateIssue msg) : ARedmineCreateIssue
{
    // 检查curl.exe是否存在
    {
        var attr = ALittle.File_GetFileAttr(msg.curl_exe_path);
	    assert (attr != null && !attr.directory, "curl工具不存在");
    }

    // 获取指派给的项目
    {
        var cmd = msg.curl_exe_path;
        cmd = cmd.." "..msg.url.."/issues.json";
        cmd = cmd.." -u "..msg.account..":"..msg.password;
        cmd = cmd.." -X POST";
        cmd = cmd.." -H \"Content-Type: application/json\"";
        cmd = cmd.." --data-binary \"@"..msg.json_path.."\"";
        var file = lua.io.popen(cmd, "rb");
        assert (file != null, "命令执行失败:"..cmd);

        var content = file.read("*a");
        var result, error, status = file.close();
        assert(result, error);
    }

    return new ARedmineCreateIssue();
}
